{
  "hash": "39f2469d1e83af57a714e643f41fff99",
  "result": {
    "markdown": "---\ntitle: PyTorch I\n---\n\n\n\n\n## 2. Tensors\nA nice overview page on PyTorch tensors is [PyTorch Basic Operations](https://jhui.github.io/2018/02/09/PyTorch-Basic-operations/).\n\n[PyTorch Tensors API](https://pytorch.org/docs/stable/tensors.html)\n\n\n### 2.1 Tensor Objects\n\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# import pytorch\nimport torch\n\na = torch.tensor([1, 2, 3])\nb = torch.tensor([2, -2])\nc = torch.tensor(\n    [[1, 2, 9], \n     [3, 4, 7]]\n)\n\nprint(a)\nprint(b)\nprint(c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntensor([1, 2, 3])\ntensor([ 2, -2])\ntensor([[1, 2, 9],\n        [3, 4, 7]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\na[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\ntensor(1)\n```\n:::\n:::\n\n\nNote that `tensor(1)` is still a `tensor`, not a `scalar`, which can only be accessed using the `item()` method.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\na[0].item()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n1\n```\n:::\n:::\n\n\n#### Tensor Shape\n\nThe `shape` property of a tensor returns the `dimensions` of the tensor, i.e. `number of elements` in each `axis` of the tensor. \n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nprint(a.shape)\nprint(b.shape)\nprint(c.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntorch.Size([3])\ntorch.Size([2])\ntorch.Size([2, 3])\n```\n:::\n:::\n\n\nFor a tensor with a single value, the shape is `null`.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\na[0].shape\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\ntorch.Size([])\n```\n:::\n:::\n\n\n#### Random values\n\n[torch.rand API](https://pytorch.org/docs/stable/generated/torch.rand.html)\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nrand_num = torch.rand(2, 3)\nrand_num\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\ntensor([[0.1429, 0.8227, 0.2034],\n        [0.2457, 0.2892, 0.6372]])\n```\n:::\n:::\n\n\n#### Standard matrices\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nones = torch.ones(2, 3)\nones\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\ntensor([[1., 1., 1.],\n        [1., 1., 1.]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nzeros = torch.zeros(2, 3)\nzeros\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\ntensor([[0., 0., 0.],\n        [0., 0., 0.]])\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\neyes = torch.eye(5)\neyes\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\ntensor([[1., 0., 0., 0., 0.],\n        [0., 1., 0., 0., 0.],\n        [0., 0., 1., 0., 0.],\n        [0., 0., 0., 1., 0.],\n        [0., 0., 0., 0., 1.]])\n```\n:::\n:::\n\n\n#### Enumeration\n\nCreate a range of integers.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ntorch.arange(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\ntensor([0, 1, 2, 3, 4])\n```\n:::\n:::\n\n\nSpecify data type as float.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ntorch.arange(5, dtype=torch.float32)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\ntensor([0., 1., 2., 3., 4.])\n```\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ntorch.arange(6.0)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\ntensor([0., 1., 2., 3., 4., 5.])\n```\n:::\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\ntorch.arange(3, 8)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\ntensor([3, 4, 5, 6, 7])\n```\n:::\n:::\n\n\n#### Boolean mask\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\naa = torch.arange(3, 8)\nprint(aa)\naa_mask = aa > 4\nprint(aa_mask)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntensor([3, 4, 5, 6, 7])\ntensor([False, False,  True,  True,  True])\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\naa = torch.arange(3, 8)\nprint(aa)\naa_mask = aa > 4\nprint(aa[aa_mask]) # note the output is one a \"view\" of aa, whose data is not modified\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntensor([3, 4, 5, 6, 7])\ntensor([5, 6, 7])\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\naa = torch.arange(3, 8)\nprint(aa)\naa_mask = aa > 4\nprint(aa_mask)\nprint(aa_mask.int())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntensor([3, 4, 5, 6, 7])\ntensor([False, False,  True,  True,  True])\ntensor([0, 0, 1, 1, 1], dtype=torch.int32)\n```\n:::\n:::\n\n\n",
    "supporting": [
      "chapter01_files"
    ],
    "filters": [],
    "includes": {}
  }
}