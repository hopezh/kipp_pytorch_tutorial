{
  "hash": "d775b716c4dd33ee5eac283dd67d5898",
  "result": {
    "markdown": "---\ntitle: PyTorch I\n---\n\n\n\n\n## 2. Tensors\nA nice overview page on PyTorch tensors is [PyTorch Basic Operations](https://jhui.github.io/2018/02/09/PyTorch-Basic-operations/).\n\n[PyTorch Tensors API](https://pytorch.org/docs/stable/tensors.html)\n\n\n### 2.1 Tensor Objects\n\n\n::: {#61f19fc9 .cell execution_count=1}\n``` {.python .cell-code}\nimport torch\n\na = torch.tensor([1, 2, 3])\nb = torch.tensor([2, -2])\nc = torch.tensor(\n    [[1, 2, 9], \n     [3, 4, 7]]\n)\n\nprint(a)\nprint(b)\nprint(c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntensor([1, 2, 3])\ntensor([ 2, -2])\ntensor([[1, 2, 9],\n        [3, 4, 7]])\n```\n:::\n:::\n\n\n::: {#2d3ff958 .cell execution_count=2}\n``` {.python .cell-code}\na[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\ntensor(1)\n```\n:::\n:::\n\n\nNote that `tensor(1)` is still a `tensor`, not a `scalar`, which can only be accessed using the `item()` method.\n\n::: {#8f7a8837 .cell execution_count=3}\n``` {.python .cell-code}\na[0].item()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n1\n```\n:::\n:::\n\n\n#### Tensor Shape\n\nThe `shape` property of a tensor returns the `dimensions` of the tensor, i.e. `number of elements` in each `axis` of the tensor. \n\n::: {#97e614de .cell execution_count=4}\n``` {.python .cell-code}\nprint(a.shape)\nprint(b.shape)\nprint(c.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntorch.Size([3])\ntorch.Size([2])\ntorch.Size([2, 3])\n```\n:::\n:::\n\n\nFor a tensor with a single value, the shape is `null`.\n\n::: {#d52bd6f5 .cell execution_count=5}\n``` {.python .cell-code}\na[0].shape\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\ntorch.Size([])\n```\n:::\n:::\n\n\n#### Random values\n\n[torch.rand API](https://pytorch.org/docs/stable/generated/torch.rand.html)\n\n::: {#14e1f1d2 .cell execution_count=6}\n``` {.python .cell-code}\nrand_num = torch.rand(2, 3)\nrand_num\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\ntensor([[0.5832, 0.0255, 0.8967],\n        [0.5604, 0.6456, 0.8163]])\n```\n:::\n:::\n\n\n#### Standard matrices\n\n::: {#7eeb59e0 .cell execution_count=7}\n``` {.python .cell-code}\nones = torch.ones(2, 3)\nones\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\ntensor([[1., 1., 1.],\n        [1., 1., 1.]])\n```\n:::\n:::\n\n\n::: {#2d94559f .cell execution_count=8}\n``` {.python .cell-code}\nzeros = torch.zeros(2, 3)\nzeros\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\ntensor([[0., 0., 0.],\n        [0., 0., 0.]])\n```\n:::\n:::\n\n\n::: {#ea6f03a0 .cell execution_count=9}\n``` {.python .cell-code}\neyes = torch.eye(5)\neyes\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\ntensor([[1., 0., 0., 0., 0.],\n        [0., 1., 0., 0., 0.],\n        [0., 0., 1., 0., 0.],\n        [0., 0., 0., 1., 0.],\n        [0., 0., 0., 0., 1.]])\n```\n:::\n:::\n\n\n#### Enumeration\n\n::: {#7bbc2860 .cell execution_count=10}\n``` {.python .cell-code}\ntorch.arange(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\ntensor([0, 1, 2, 3, 4])\n```\n:::\n:::\n\n\n---\njupyter:\n  kernelspec:\n    display_name: Python 3 (ipykernel)\n    language: python\n    name: python3\n  language_info:\n    codemirror_mode:\n      name: ipython\n      version: 3\n    file_extension: .py\n    mimetype: text/x-python\n    name: python\n    nbconvert_exporter: python\n    pygments_lexer: ipython3\n    version: 3.10.12\n---\n",
    "supporting": [
      "chapter01_files/figure-ipynb"
    ],
    "filters": []
  }
}